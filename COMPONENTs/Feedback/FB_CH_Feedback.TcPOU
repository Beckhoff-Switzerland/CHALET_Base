<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_CH_Feedback" Id="{6a9d3331-e3b5-4ef2-b574-157425a03b33}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CH_Feedback IMPLEMENTS I_CH_Feedback
VAR
    {attribute 'hide'}
    _hr : HRESULT;
    {attribute 'hide'}
    _activeCommand : STRING;
    {attribute 'hide'}
    _lastCommandAccepted : BOOL;
    {attribute 'hide'}
    fbAlarm : Tc3_EventLogger.FB_TcAlarm;	
	{attribute 'hide'}
	nOldErrorId : UDINT;
	{attribute 'hide'}
	//Optional. If interface is <>0 a Error is automatic written in TC3_Eventlogger
	ipSourceInfo : I_TcSourceInfo;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ActiveCommand" Id="{74521113-d3e6-42d6-8a1b-a1225eeed223}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ActiveCommand : STRING;]]></Declaration>
      <Get Name="Get" Id="{241f0b04-d6dc-4afe-9bc5-533a1095c670}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ActiveCommand := THIS^._ActiveCommand;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{1790ab83-c2a7-4cf5-91a4-51db97f4ee7b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._ActiveCommand 		:= ActiveCommand;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Busy" Id="{01704ce5-65dd-4c2c-b20c-13bf4474c34e}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
(* Indicates a busy command, i.e. command is being processed, waiting for execution, or already executing (= also active). *)
PROPERTY Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{99d85667-79a5-494f-aeda-392fec898af6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := (THIS^._hr = S_PENDING);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{da44fe38-e379-4f2a-ac80-c1293b193b88}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF Busy THEN
	THIS^._hr := S_PENDING;
END_IF

THIS^.UpdateEventlogger();]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Done" Id="{20f4ad69-fdf5-4a2d-9604-a94943430c26}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
(* Indicates the command is done, i.e. execution of the command finished successfully. *)
PROPERTY Done : BOOL]]></Declaration>
      <Get Name="Get" Id="{b433dda0-c90b-4df3-b1f6-534c10364c62}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := NOT THIS^.Busy AND NOT THIS^.Error;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a69bc1a9-c1ce-48ad-a483-909bd72ada41}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF Done THEN
	THIS^._hr := S_OK;
END_IF


THIS^.UpdateEventlogger();

]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{d2c042f0-ea4a-4b25-8fab-282ca7de8e19}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
(* Indicates the command has an error. *)
PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{d01adf4c-d18f-41f2-9d8b-fd589c9d89a2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := FAILED(THIS^._hr);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorId" Id="{94be652c-ba64-43ae-9c5f-478f83c78d25}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
(* Indicates the error id of the command error. *)
PROPERTY ErrorId : UDINT]]></Declaration>
      <Get Name="Get" Id="{ecf1382a-c3f1-4c69-b75c-4bc1b9f010f9}">
        <Declaration><![CDATA[VAR
	
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorId := DWORD_TO_UDINT(DINT_TO_DWORD(THIS^._hr) AND 16#0000FFFF); //only return the last two byte with the error Id

//515 means busy and is not an Error
IF ErrorId = 515 THEN
	ErrorId := 0;
END_IF]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a670d4d7-e02d-48f5-8576-a476559beda9}">
        <Declaration><![CDATA[VAR
	//A failed execution is indicated by a NEGATIVE code, or in hexadecimal notation the first digit is >= 8.
	nErrorCodeSign : UDINT := 2#10000000000000000000000000000000;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF ErrorId <> 0 THEN
	//Bitwise OR
	THIS^._hr := DWORD_TO_DINT(TO_DWORD(nErrorCodeSign) OR TO_DWORD(ErrorId));
END_IF


THIS^.UpdateEventlogger();]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_init" Id="{ab1b192a-2f19-4059-b4de-7fbf1f578a5f}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	//Optional. If interface is <>0 a Error is automatic written in TC3_Eventlogger
	ipSourceInfo : I_TcSourceInfo;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.ipSourceInfo := ipSourceInfo;]]></ST>
      </Implementation>
    </Method>
    <Property Name="HR" Id="{68cd560a-cd72-4c04-a4de-6c22be82bafb}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY HR : HRESULT]]></Declaration>
      <Get Name="Get" Id="{f0abf468-a3ed-4ca4-b2a3-86a823f6ba3f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HR := THIS^._hr;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c24caa40-a92f-4289-b7a6-8bc6130608c4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._hr := HR;

THIS^.UpdateEventlogger();]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="LastCommandAccepted" Id="{05357f24-a216-401e-9798-610ac1492caf}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY LastCommandAccepted : BOOL]]></Declaration>
      <Get Name="Get" Id="{aa5265f1-5a0b-49e1-ac72-c6db37deaf16}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[LastCommandAccepted := THIS^._lastCommandAccepted;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d6d60754-5d24-43c9-a93e-b94807c87f0c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._lastCommandAccepted := LastCommandAccepted;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="UpdateEventlogger" Id="{820b8977-8ae3-4cef-9fb5-0bcc7b4d79be}">
      <Declaration><![CDATA[METHOD PROTECTED UpdateEventlogger : BOOL
VAR
	nHR : DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.ipSourceInfo = 0 THEN
	//No TC3_Eventlogger alarm if interface is empty
	RETURN;
END_IF

//New alarm, raise
IF (THIS^.ErrorId <> THIS^.nOldErrorId) AND THIS^.Error THEN
	THIS^.fbAlarm.Clear(0,0);
	THIS^.fbAlarm.CreateEx(stEventEntry := TC_EVENTS.CHALET_Base_Events.FeedbackErrorCmd, ipSourceInfo := THIS^.ipSourceInfo, bWithConfirmation:= FALSE);
	//Error in feedback command {0} error id {1}
	
	//convert to DWORD
	nHR := TO_DWORD(THIS^.HR);
	
	//Try to get some more details about error id
	IF THIS^.HR = E_FAIL THEN
		THIS^.fbAlarm.ipArguments.Clear().AddStringByValue(THIS^.ActiveCommand).AddStringByValue('E_FAIL');
		
	ELSIF ((nHR AND 16#FFFF_FF00) = 16#9811_0000) THEN
		THIS^.fbAlarm.ipArguments.Clear().AddStringByValue(THIS^.ActiveCommand).AddUDInt(THIS^.ErrorId).AddEventReferenceIdGuid(nEventId := THIS^.ErrorId, EventClass := TC_EVENT_CLASSES.TcSystemEventClass);
		;//Global error codes
			
	ELSIF ((nHR AND 16#FFFF_FF00) = 16#9811_0500) THEN
		THIS^.fbAlarm.ipArguments.Clear().AddStringByValue(THIS^.ActiveCommand).AddUDInt(THIS^.ErrorId).AddEventReferenceIdGuid(nEventId := THIS^.ErrorId, EventClass := TC_EVENT_CLASSES.TcRouterEventClass);
		;//Router error codes
			
	ELSIF ((nHR AND 16#FFFF_FF00) = 16#9811_0700) THEN
		THIS^.fbAlarm.ipArguments.Clear().AddStringByValue(THIS^.ActiveCommand).AddUDInt(THIS^.ErrorId).AddEventReferenceIdGuid(nEventId := THIS^.ErrorId, EventClass := TC_EVENT_CLASSES.TcGeneralAdsEventClass);
		;//General ADS errors
			
	ELSIF ((nHR AND 16#FFFF_FF00) = 16#9811_1000) THEN
		THIS^.fbAlarm.ipArguments.Clear().AddStringByValue(THIS^.ActiveCommand).AddUDInt(THIS^.ErrorId).AddEventReferenceIdGuid(nEventId := THIS^.ErrorId, EventClass := TC_EVENT_CLASSES.TcRTimeEventClass);
		;//RTime error codes
	
	ELSE
		THIS^.fbAlarm.ipArguments.Clear().AddStringByValue(THIS^.ActiveCommand).AddUDInt(THIS^.ErrorId);
	END_IF
	



	THIS^.fbAlarm.Raise(0);
	
//No alarm	
ELSIF NOT THIS^.Error THEN
	THIS^.fbAlarm.Clear(0,0);
END_IF


THIS^.nOldErrorId := THIS^.ErrorId;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>